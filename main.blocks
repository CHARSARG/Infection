<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="EQiScjz2=ZH1_RVSky`=">players</variable><variable id="W{Cw@U0`W*mviX_:5707">p</variable><variable id="s,2#TpWAt,I7hjiGYX$Z">q</variable><variable id="y`)^?,)`cUQ|4^VR}sQU">r</variable><variable id=".|50MQ4)T=F{x?cpO)=]">patientZero</variable><variable id="%2d!AxYXi.Z@:5aRcuV?">state</variable><variable id="o9`S;Hq!!#.O|J2[~kUK">master</variable><variable id="kLQ?bk%x1Q$h2]]$($w^">paired</variable><variable id="N_R:iZvbbJ6V+IHS=E9a">signal</variable><variable id="Q8Pc{2q6r1rH118s1xsK">INCUBATION</variable><variable id="guK#SVf.#}ZuUo0J.:;b">DEATH</variable><variable id="zL-bFO~{DtuFJ*^Sv@jA">RSSI</variable><variable id="s`{+zPcuWk1,MBNV`T*?">TRANSMISSIONPROB</variable><variable id="z;/bk#OKdnt7ov|Kqk1@">playerIcons</variable><variable id="m@KusyUb]h6%I)6B%Ym4">infectedBy</variable><variable id=":b(i#C^f:P3o3OSBt|F.">playerIcon</variable></variables><comment data="2" x="707" y="0" h="120" w="160">player state</comment><comment data="1" x="707" y="133" h="120" w="160">master state</comment><comment data="0" x="707" y="266" h="360" w="480">Infection game&#10;&#10;Flash all micro:bits with this script&#10;&#10;Press A+B to enter master mode (1 per game)&#10;&#10;Wait for players to be paired. The number of paired player will display on screen.&#10;An icon will appear on player's screen.&#10;&#10;Press A+B to start the infection game. The master will pick a random&#10;player as patient zero.&#10;&#10;A player will transmit the disease if close enough (RSSI)&#10;and with a certain probability (TRANSMISSIONPROB).&#10;During the incudation phase (INCUBATION), the player does not show any sign&#10;of illness. After that phase, the sad face shows up.&#10;&#10;The game will automatically stop once all players are dead or healthy. The master can&#10;also press A+B again to stop the game.&#10;&#10;Once the game is over, the micro:bit will show the player id (A,B,C...), health and&#10;who infected him.&#10;&#10;Icons used in the game:&#10;&#10;Pairing: IconNames.Ghost&#10;Paired: IconNames.Happy&#10;Dead: IconNames.Skull&#10;Sick: IconNames.Sad&#10;Incubating: IconNames.Confused&#10;Healthy: IconNames.Happy</comment><block type="pxt-on-start" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let infectedTime = 0" numlines="1" declaredvars="infectedTime"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let paired = false" numlines="1" declaredvars="paired"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let players: Player[] = []" numlines="1" declaredvars="players"></mutation><next><block type="variables_set"><field name="VAR" id="Q8Pc{2q6r1rH118s1xsK">INCUBATION</field><comment pinned="false" h="80" w="160">time before showing symptoms</comment><data>0</data><value name="VALUE"><shadow type="math_number"><field name="NUM">20000</field></shadow></value><next><block type="variables_set"><field name="VAR" id="guK#SVf.#}ZuUo0J.:;b">DEATH</field><comment pinned="false" h="80" w="160">time before dying off the disease</comment><value name="VALUE"><shadow type="math_number"><field name="NUM">40000</field></shadow></value><next><block type="variables_set"><field name="VAR" id="zL-bFO~{DtuFJ*^Sv@jA">RSSI</field><comment pinned="false" h="80" w="160">db</comment><value name="VALUE"><shadow type="math_number"><field name="NUM">-45</field></shadow></value><next><block type="variables_set"><field name="VAR" id="s`{+zPcuWk1,MBNV`T*?">TRANSMISSIONPROB</field><comment pinned="false" h="80" w="160">% probability to transfer disease</comment><value name="VALUE"><shadow type="math_number"><field name="NUM">40</field></shadow></value><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum GameState {" line1="    Stopped," line2="    Pairing," line3="    Infecting," line4="    Running," line5="    Over" line6="}" numlines="7"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum HealthState {" line1="    Healthy," line2="    Incubating," line3="    Sick," line4="    Dead" line5="}" numlines="6"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum MessageKind {" line1="    PairRequest," line2="    PairConfirmation," line3="    HealthSet," line4="    HealthValue," line5="    InitialInfect," line6="    TransmitVirus," line7="    GameState" line8="}" numlines="9"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const GameIcons = {" line1="    Pairing: IconNames.Ghost," line2="    Paired: IconNames.Happy," line3="    Dead: IconNames.Skull," line4="    Sick: IconNames.Sad," line5="    Incubating: IconNames.Confused," line6="    Healthy: IconNames.Happy" line7="}" numlines="8" declaredvars="GameIcons"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Message {" line1="" line2="    private _data: Buffer;" line3="" line4="    constructor(input?: Buffer) {" line5="        this._data = input || control.createBuffer(13);" line6="    }" line7="" line8="    get kind(): number {" line9="        return this._data.getNumber(NumberFormat.Int8LE, 0);" line10="    }" line11="" line12="    set kind(x: number) {" line13="        this._data.setNumber(NumberFormat.Int8LE, 0, x);" line14="    }" line15="" line16="    get fromSerialNumber(): number {" line17="        return this._data.getNumber(NumberFormat.Int32LE, 1);" line18="    }" line19="" line20="    set fromSerialNumber(x: number) {" line21="        this._data.setNumber(NumberFormat.Int32LE, 1, x);" line22="    }" line23="" line24="    get value(): number {" line25="        return this._data.getNumber(NumberFormat.Int32LE, 5);" line26="    }" line27="" line28="    set value(x: number) {" line29="        this._data.setNumber(NumberFormat.Int32LE, 5, x);" line30="    }" line31="" line32="    get toSerialNumber(): number {" line33="        return this._data.getNumber(NumberFormat.Int32LE, 9);" line34="    }" line35="" line36="    set toSerialNumber(x: number) {" line37="        this._data.setNumber(NumberFormat.Int32LE, 9, x);" line38="    }" line39="" line40="    send() {" line41="        radio.sendBuffer(this._data);" line42="        basic.pause(250);" line43="    }" line44="}" numlines="45"></mutation><next><block type="variables_set"><field name="VAR" id="z;/bk#OKdnt7ov|Kqk1@">playerIcons</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text"><field name="TEXT">ABCDEFGHIJKLMNOPQRSTUVWXYZ</field></block></value><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Player {" line1="    id: number;" line2="    icon: number;" line3="    health: HealthState;" line4="    show() {" line5="        basic.showString(playerIcons[this.icon]);" line6="    }" line7="}" numlines="8"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let state = GameState.Stopped;" numlines="1" declaredvars="state"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let patientZero: Player;" numlines="1" declaredvars="patientZero"></mutation><next><block type="variables_set"><field name="VAR" id="m@KusyUb]h6%I)6B%Ym4">infectedBy</field><comment pinned="false" h="80" w="160">who infected (playerIcon)</comment><value name="VALUE"><shadow type="math_number"><field name="NUM">-1</field></shadow></value><next><block type="variables_set"><field name="VAR" id=":b(i#C^f:P3o3OSBt|F.">playerIcon</field><comment pinned="false" h="80" w="160">local time when infection happened&#10;player icon and identity</comment><value name="VALUE"><shadow type="math_number"><field name="NUM">-1</field></shadow></value><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let health = HealthState.Healthy;" numlines="1" declaredvars="health"></mutation><next><block type="radio_set_group"><value name="ID"><shadow type="math_number_minmax"><mutation min="0" max="255" label="Number" precision="0"/><field name="SLIDER">42</field></shadow></value><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="basic.showIcon(GameIcons.Pairing)" numlines="1"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="function_definition" x="1232" y="0"><mutation name="player" functionid="}Sa;LDD3-_T/x$(^jzv!"><arg name="id" id="wp9e33kjo3k6b0d32c6y" type="number"/></mutation><field name="function_name">player</field><comment pinned="false" h="80" w="160">get a player instance (creates one as needed)</comment><value name="wp9e33kjo3k6b0d32c6y"><shadow type="argument_reporter_number"><field name="VALUE">id</field></shadow></value><statement name="STACK"><block type="pxt_controls_for_of"><value name="VAR"><shadow type="variables_get_reporter"><field name="VAR" id="W{Cw@U0`W*mviX_:5707">p</field></shadow></value><value name="LIST"><block type="variables_get"><field name="VAR" id="EQiScjz2=ZH1_RVSky`=">players</field></block></value><statement name="DO"><block type="controls_if"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" editable="false"><field name="EXPRESSION">p.id</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_number"><field name="VALUE">id</field></block></value></block></value><statement name="DO0"><block type="function_return"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get"><field name="VAR" id="W{Cw@U0`W*mviX_:5707">p</field></block></value></block></statement></block></statement><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let q = new Player();" numlines="1" declaredvars="q"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="q.id = id;" numlines="1"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="q.icon = (players.length + 1) % playerIcons.length;" numlines="1"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="q.health = HealthState.Healthy;" numlines="1"></mutation><next><block type="array_push"><value name="list"><block type="variables_get"><field name="VAR" id="EQiScjz2=ZH1_RVSky`=">players</field></block></value><value name="value"><block type="variables_get"><field name="VAR" id="s,2#TpWAt,I7hjiGYX$Z">q</field></block></value><next><block type="serial_writeline"><value name="text"><block type="typescript_expression" editable="false"><field name="EXPRESSION">`player ==&gt; ${q.id}`</field></block></value><next><block type="function_return"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get"><field name="VAR" id="s,2#TpWAt,I7hjiGYX$Z">q</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="function_definition" x="1871" y="0"><mutation name="allDead" functionid="VZp,VajDm};?:@D5DFcl"/><field name="function_name">allDead</field><statement name="STACK"><block type="pxt_controls_for_of"><value name="VAR"><shadow type="variables_get_reporter"><field name="VAR" id="y`)^?,)`cUQ|4^VR}sQU">r</field></shadow></value><value name="LIST"><block type="variables_get"><field name="VAR" id="EQiScjz2=ZH1_RVSky`=">players</field></block></value><statement name="DO"><block type="controls_if"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare"><field name="OP">NEQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" editable="false"><field name="EXPRESSION">r.health</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" editable="false"><field name="EXPRESSION">HealthState.Dead</field></block></value></block></value><statement name="DO0"><block type="function_return"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean"><field name="BOOL">FALSE</field></block></value></block></statement></block></statement><next><block type="function_return"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean"><field name="BOOL">TRUE</field></block></value></block></next></block></statement></block><block type="function_definition" x="2570" y="0"><mutation name="gameOver" functionid="FI4^KnmY;ueogv7SAsWD"/><field name="function_name">gameOver</field><statement name="STACK"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="state = GameState.Over;" numlines="1"></mutation><next><block type="controls_if"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get"><field name="VAR" id=".|50MQ4)T=F{x?cpO)=]">patientZero</field></block></value><statement name="DO0"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="patientZero.show();" numlines="1"></mutation></block></statement></block></next></block></statement></block><block type="function_definition" x="2957" y="0"><mutation name="gameFace" functionid=",[Pyfo_glxeeByXS.[SY"/><field name="function_name">gameFace</field><statement name="STACK"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (state) {" line1="        case GameState.Stopped:" line2="            basic.showIcon(GameIcons.Pairing);" line3="            break;" line4="        case GameState.Pairing:" line5="            if (playerIcon &gt; -1)" line6="                basic.showString(playerIcons[playerIcon]);" line7="            else" line8="                basic.showIcon(paired ? GameIcons.Paired : GameIcons.Pairing, 1);" line9="            break;" line10="        case GameState.Infecting:" line11="        case GameState.Running:" line12="            switch (health) {" line13="                case HealthState.Dead:" line14="                    basic.showIcon(GameIcons.Dead, 1);" line15="                    break;" line16="                case HealthState.Sick:" line17="                    basic.showIcon(GameIcons.Sick, 1);" line18="                    break;" line19="                default:" line20="                    basic.showIcon(GameIcons.Healthy, 1);" line21="                    break;" line22="            }" line23="            break;" line24="        case GameState.Over:" line25="            // show id" line26="            basic.showString(playerIcons[playerIcon]);" line27="            basic.pause(2000);" line28="            // show health" line29="            switch (health) {" line30="                case HealthState.Dead:" line31="                    basic.showIcon(GameIcons.Dead, 2000);" line32="                    break;" line33="                case HealthState.Sick:" line34="                    basic.showIcon(GameIcons.Sick, 2000);" line35="                    break;" line36="                case HealthState.Incubating:" line37="                    basic.showIcon(GameIcons.Incubating, 2000);" line38="                    break;" line39="                default:" line40="                    basic.showIcon(GameIcons.Healthy, 2000);" line41="                    break;" line42="            }" line43="            // show how infected" line44="            if (infectedBy &gt; -1) {" line45="                basic.showString(&quot; INFECTED BY&quot;);" line46="                basic.showString(playerIcons[infectedBy]);" line47="                basic.pause(2000);" line48="            } else {" line49="                basic.showString(&quot; PATIENT ZERO&quot;);" line50="                basic.pause(2000);" line51="            }" line52="            // show score" line53="            game.showScore();" line54="            basic.pause(1000);" line55="            break;" line56="    }" numlines="57"></mutation></block></statement></block><block type="device_button_event" x="3896" y="0"><field name="NAME">Button.AB</field><statement name="HANDLER"><block type="controls_if"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_operation"><field name="OP">AND</field><value name="A"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get"><field name="VAR" id="%2d!AxYXi.Z@:5aRcuV?">state</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" editable="false"><field name="EXPRESSION">GameState.Stopped</field></block></value></block></value><value name="B"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_negate"><value name="BOOL"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get"><field name="VAR" id="o9`S;Hq!!#.O|J2[~kUK">master</field></block></value></block></value></block></value><statement name="DO0"><block type="variables_set"><field name="VAR" id="o9`S;Hq!!#.O|J2[~kUK">master</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean"><field name="BOOL">TRUE</field></block></value><next><block type="variables_set"><field name="VAR" id="kLQ?bk%x1Q$h2]]$($w^">paired</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean"><field name="BOOL">TRUE</field></block></value><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="state = GameState.Pairing;" numlines="1"></mutation><next><block type="serial_writeline"><value name="text"><shadow type="text"><field name="TEXT">registered as master</field></shadow></value><next><block type="radio_set_transmit_power"><value name="power"><shadow type="math_number_minmax"><mutation min="0" max="7" label="Number" precision="0"/><field name="SLIDER">7</field></shadow></value><next><block type="device_print_message"><value name="text"><shadow type="text"><field name="TEXT">0</field></shadow></value><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="return;" numlines="1"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><next><block type="controls_if"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_negate"><value name="BOOL"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get"><field name="VAR" id="o9`S;Hq!!#.O|J2[~kUK">master</field></block></value></block></value><statement name="DO0"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="return;" numlines="1"></mutation></block></statement><next><block type="controls_if"><mutation elseif="1"/><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get"><field name="VAR" id="%2d!AxYXi.Z@:5aRcuV?">state</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" editable="false"><field name="EXPRESSION">GameState.Pairing</field></block></value></block></value><statement name="DO0"><block type="variables_set"><field name="VAR" id=".|50MQ4)T=F{x?cpO)=]">patientZero</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_index_get"><value name="LIST"><block type="variables_get"><field name="VAR" id="EQiScjz2=ZH1_RVSky`=">players</field></block></value><value name="INDEX"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="device_random"><value name="min"><shadow type="math_number"><field name="NUM">0</field></shadow></value><value name="limit"><block type="math_arithmetic"><field name="OP">MINUS</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_length"><value name="VALUE"><block type="variables_get"><field name="VAR" id="EQiScjz2=ZH1_RVSky`=">players</field></block></value></block></value><value name="B"><shadow type="math_number"><field name="NUM">1</field></shadow></value></block></value></block></value></block></value><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="state = GameState.Infecting;" numlines="1"></mutation><next><block type="serial_writeline"><value name="text"><block type="typescript_expression" editable="false"><field name="EXPRESSION">`game started ${players.length} players`</field></block></value></block></next></block></next></block></statement><value name="IF1"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get"><field name="VAR" id="%2d!AxYXi.Z@:5aRcuV?">state</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" editable="false"><field name="EXPRESSION">GameState.Running</field></block></value></block></value><statement name="DO1"><block type="function_call"><mutation name="gameOver" functionid="FI4^KnmY;ueogv7SAsWD"/></block></statement></block></next></block></next></block></statement></block><block type="radio_on_buffer_drag" x="5181" y="0"><value name="HANDLER_DRAG_PARAM_receivedBuffer"><shadow type="argument_reporter_custom"><mutation typename="Buffer"/><field name="VALUE">receivedBuffer</field></shadow></value><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const incomingMessage = new Message(receivedBuffer);" numlines="1" declaredvars="incomingMessage"></mutation><next><block type="variables_set"><field name="VAR" id="N_R:iZvbbJ6V+IHS=E9a">signal</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="radio_received_packet"><value name="type"><shadow type="radio_packet_property"><field name="note">RadioPacketProperty.SignalStrength</field></shadow></value></block></value><next><block type="controls_if"><mutation else="1"/><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get"><field name="VAR" id="o9`S;Hq!!#.O|J2[~kUK">master</field></block></value><statement name="DO0"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (incomingMessage.kind) {" line1="            case MessageKind.PairRequest:" line2="                // register player" line3="                let n = players.length;" line4="                player(incomingMessage.fromSerialNumber);" line5="                // show player number if changed" line6="                if (n != players.length) {" line7="                    basic.showNumber(players.length);" line8="                }" line9="                break;" line10="            case MessageKind.HealthValue:" line11="                let s = player(incomingMessage.fromSerialNumber);" line12="                s.health = incomingMessage.value;" line13="                // check if all infected" line14="                if (allDead())" line15="                    gameOver();" line16="                break;" line17="        }" numlines="18"></mutation></block></statement><statement name="ELSE"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (incomingMessage.kind) {" line1="            case MessageKind.GameState:" line2="                // update game state" line3="                state = incomingMessage.value as GameState;" line4="                break;" line5="            case MessageKind.InitialInfect:" line6="                if (infectedBy &lt; 0 &amp;&amp;" line7="                    incomingMessage.toSerialNumber == control.deviceSerialNumber()) {" line8="                    // infected by master" line9="                    infectedBy = 0; // infected my master" line10="                    infectedTime = input.runningTime();" line11="                    health = HealthState.Incubating;" line12="                    serial.writeLine(`infected ${control.deviceSerialNumber()}`);" line13="                }" line14="                break;" line15="            case MessageKind.HealthSet:" line16="                if (incomingMessage.toSerialNumber == control.deviceSerialNumber()) {" line17="                    const newHealth = incomingMessage.value;" line18="                    if (health &lt; newHealth) {" line19="                        health = newHealth;" line20="                    }" line21="                }" line22="                break;" line23="            case MessageKind.PairConfirmation:" line24="                if (!paired &amp;&amp; state == GameState.Pairing &amp;&amp;" line25="                    incomingMessage.toSerialNumber == control.deviceSerialNumber()) {" line26="                    // paired!" line27="                    serial.writeLine(`player paired ==&gt; ${control.deviceSerialNumber()}`)" line28="                    playerIcon = incomingMessage.value;" line29="                    paired = true;" line30="                }" line31="                break;" line32="            case MessageKind.TransmitVirus:" line33="                if (state == GameState.Running) {" line34="                    if (health == HealthState.Healthy) {" line35="                        serial.writeLine(`signal: ${signal}`);" line36="                        if (signal &gt; RSSI &amp;&amp;" line37="                            randint(0, 100) &gt; TRANSMISSIONPROB) {" line38="                            infectedBy = incomingMessage.value;" line39="                            infectedTime = input.runningTime();" line40="                            health = HealthState.Incubating;" line41="                        }" line42="                    }" line43="                }" line44="                break;" line45="            case MessageKind.HealthValue:" line46="                if (health != HealthState.Dead &amp;&amp; signal &gt; RSSI) {" line47="                    game.addScore(1);" line48="                }" line49="                break;" line50="        }" numlines="51"></mutation></block></statement></block></next></block></next></block></statement></block><block type="device_forever" x="6268" y="0"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let message: Message;" numlines="1" declaredvars="message"></mutation><next><block type="controls_if"><mutation else="1"/><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get"><field name="VAR" id="o9`S;Hq!!#.O|J2[~kUK">master</field></block></value><statement name="DO0"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (state) {" line1="            case GameState.Pairing:" line2="                // tell each player they are registered" line3="                for (const t of players) {" line4="                    message = new Message();" line5="                    message.kind = MessageKind.PairConfirmation;" line6="                    message.value = t.icon;" line7="                    message.toSerialNumber = t.id;" line8="                    message.send();" line9="                }" line10="                serial.writeLine(`pairing ${players.length} players`);" line11="                basic.pause(500);" line12="                break;" line13="            case GameState.Infecting:" line14="                if (patientZero.health == HealthState.Healthy) {" line15="                    message = new Message();" line16="                    message.kind = MessageKind.InitialInfect;" line17="                    message.toSerialNumber = patientZero.id;" line18="                    message.send();" line19="                    basic.pause(100);" line20="                } else {" line21="                    serial.writeLine(`patient ${patientZero.id} infected`);" line22="                    // show startup" line23="                    basic.showIcon(GameIcons.Dead);" line24="                    state = GameState.Running;" line25="                }" line26="                break;" line27="            case GameState.Running:" line28="                for (const u of players) {" line29="                    message = new Message();" line30="                    message.kind = MessageKind.HealthSet;" line31="                    message.value = u.health;" line32="                    message.toSerialNumber = u.id;" line33="                    message.send();" line34="                }" line35="                break;" line36="            case GameState.Over:" line37="                if (patientZero)" line38="                    patientZero.show();" line39="                break;" line40="        }" numlines="41"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="message = new Message()" numlines="1"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="message.kind = MessageKind.GameState;" numlines="1"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="message.value = state;" numlines="1"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="message.send();" numlines="1"></mutation></block></next></block></next></block></next></block></next></block></statement><statement name="ELSE"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (state) {" line1="            case GameState.Pairing:" line2="                // broadcast player id" line3="                if (playerIcon &lt; 0) {" line4="                    message = new Message();" line5="                    message.kind = MessageKind.PairRequest;" line6="                    message.fromSerialNumber = control.deviceSerialNumber();" line7="                    message.send();" line8="                } else if (infectedBy &gt; -1) {" line9="                    message = new Message();" line10="                    message.kind = MessageKind.HealthValue;" line11="                    message.fromSerialNumber = control.deviceSerialNumber();" line12="                    message.value = health;" line13="                    message.send();" line14="                }" line15="                break;" line16="            case GameState.Infecting:" line17="                message = new Message();" line18="                message.kind = MessageKind.HealthValue;" line19="                message.fromSerialNumber = control.deviceSerialNumber();" line20="                message.value = health;" line21="                message.send();" line22="                break;" line23="            case GameState.Running:" line24="                // update health status" line25="                if (health != HealthState.Healthy &amp;&amp; input.runningTime() - infectedTime &gt; DEATH)" line26="                    health = HealthState.Dead;" line27="                else if (health != HealthState.Healthy &amp;&amp; input.runningTime() - infectedTime &gt; INCUBATION)" line28="                    health = HealthState.Sick;" line29="                // transmit disease" line30="                if (health == HealthState.Incubating || health == HealthState.Sick) {" line31="                    message = new Message();" line32="                    message.kind = MessageKind.TransmitVirus;" line33="                    message.fromSerialNumber = control.deviceSerialNumber();" line34="                    message.value = playerIcon;" line35="                    message.send();" line36="                }" line37="                message = new Message();" line38="                message.kind = MessageKind.HealthValue;" line39="                message.fromSerialNumber = control.deviceSerialNumber();" line40="                message.value = health;" line41="                message.send();" line42="                break;" line43="        }" numlines="44"></mutation><next><block type="function_call"><mutation name="gameFace" functionid=",[Pyfo_glxeeByXS.[SY"/></block></next></block></statement></block></next></block></statement></block></xml>